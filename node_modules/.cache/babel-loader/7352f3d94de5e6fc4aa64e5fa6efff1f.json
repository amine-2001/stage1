{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React from 'react';\nimport classnames from 'classnames';\nimport omit from 'lodash/omit';\nimport { filterDOMProps } from 'uniforms';\nimport gridClassName from './gridClassName';\nexport default function wrapField(_a, children) {\n  var {\n    className,\n    disabled,\n    error,\n    errorMessage,\n    grid,\n    // Grid is either an number between 1 and 11 or an object with keys like xs and md.\n    help,\n    // Help text.\n    helpClassName,\n    // Help text class name.\n    id,\n    label,\n    labelClassName,\n    // Label class name (String|Array[String]).\n    required,\n    showInlineError,\n    // Show inline error message?\n    wrapClassName\n  } = _a,\n      // Input wrapper class name.\n  props = __rest(_a, [\"className\", \"disabled\", \"error\", \"errorMessage\", \"grid\", \"help\", \"helpClassName\", \"id\", \"label\", \"labelClassName\", \"required\", \"showInlineError\", \"wrapClassName\"]);\n\n  const hasWrap = !!(grid || wrapClassName);\n  const blockError = !!(error && showInlineError) && React.createElement(\"span\", {\n    className: \"form-text text-danger\"\n  }, errorMessage);\n  const blockHelp = !!help && React.createElement(\"span\", {\n    className: classnames('form-text', helpClassName || 'text-muted')\n  }, help);\n  return React.createElement(\"div\", Object.assign({\n    className: classnames(className, 'form-group', {\n      'is-invalid': error,\n      disabled,\n      required,\n      row: grid\n    })\n  }, filterDOMProps(omit(props, ['checkboxes', 'inline', 'inputClassName', 'inputRef', 'rows', 'transform']))), label && React.createElement(\"label\", {\n    htmlFor: id,\n    className: classnames({\n      'col-form-label': grid,\n      'text-danger': error\n    }, gridClassName(grid, 'label'), labelClassName)\n  }, label), hasWrap && React.createElement(\"div\", {\n    className: classnames(wrapClassName, gridClassName(grid, 'input'))\n  }, children, blockHelp, blockError), !hasWrap && children, !hasWrap && blockHelp, !hasWrap && blockError);\n}","map":{"version":3,"sources":["C:/Users/asus/Desktop/new template/myadmin-lite/node_modules/uniforms-bootstrap4/es6/wrapField.js"],"names":["__rest","React","classnames","omit","filterDOMProps","gridClassName","wrapField","_a","children","className","disabled","error","errorMessage","grid","help","helpClassName","id","label","labelClassName","required","showInlineError","wrapClassName","props","hasWrap","blockError","createElement","blockHelp","Object","assign","row","htmlFor"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,eAAe,SAASC,SAAT,CAAmBC,EAAnB,EAAuBC,QAAvB,EAAiC;AAC5C,MAAI;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA,KAAvB;AAA8BC,IAAAA,YAA9B;AAA4CC,IAAAA,IAA5C;AAAkD;AACtDC,IAAAA,IADI;AACE;AACNC,IAAAA,aAFI;AAEW;AACfC,IAAAA,EAHI;AAGAC,IAAAA,KAHA;AAGOC,IAAAA,cAHP;AAGuB;AAC3BC,IAAAA,QAJI;AAIMC,IAAAA,eAJN;AAIuB;AAC3BC,IAAAA;AALI,MAKcd,EALlB;AAAA,MAKsB;AACtBe,EAAAA,KAAK,GAAGtB,MAAM,CAACO,EAAD,EAAK,CAAC,WAAD,EAAc,UAAd,EAA0B,OAA1B,EAAmC,cAAnC,EAAmD,MAAnD,EAA2D,MAA3D,EAAmE,eAAnE,EAAoF,IAApF,EAA0F,OAA1F,EAAmG,gBAAnG,EAAqH,UAArH,EAAiI,iBAAjI,EAAoJ,eAApJ,CAAL,CANd;;AAOA,QAAMgB,OAAO,GAAG,CAAC,EAAEV,IAAI,IAAIQ,aAAV,CAAjB;AACA,QAAMG,UAAU,GAAG,CAAC,EAAEb,KAAK,IAAIS,eAAX,CAAD,IAAiCnB,KAAK,CAACwB,aAAN,CAAoB,MAApB,EAA4B;AAAEhB,IAAAA,SAAS,EAAE;AAAb,GAA5B,EAAoEG,YAApE,CAApD;AACA,QAAMc,SAAS,GAAG,CAAC,CAACZ,IAAF,IAAWb,KAAK,CAACwB,aAAN,CAAoB,MAApB,EAA4B;AAAEhB,IAAAA,SAAS,EAAEP,UAAU,CAAC,WAAD,EAAca,aAAa,IAAI,YAA/B;AAAvB,GAA5B,EAAmGD,IAAnG,CAA7B;AACA,SAAQb,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2BE,MAAM,CAACC,MAAP,CAAc;AAAEnB,IAAAA,SAAS,EAAEP,UAAU,CAACO,SAAD,EAAY,YAAZ,EAA0B;AAC1F,oBAAcE,KAD4E;AAE1FD,MAAAA,QAF0F;AAG1FS,MAAAA,QAH0F;AAI1FU,MAAAA,GAAG,EAAEhB;AAJqF,KAA1B;AAAvB,GAAd,EAKzBT,cAAc,CAACD,IAAI,CAACmB,KAAD,EAAQ,CACjC,YADiC,EAEjC,QAFiC,EAGjC,gBAHiC,EAIjC,UAJiC,EAKjC,MALiC,EAMjC,WANiC,CAAR,CAAL,CALW,CAA3B,EAaJL,KAAK,IAAKhB,KAAK,CAACwB,aAAN,CAAoB,OAApB,EAA6B;AAAEK,IAAAA,OAAO,EAAEd,EAAX;AAAeP,IAAAA,SAAS,EAAEP,UAAU,CAAC;AACpE,wBAAkBW,IADkD;AAEpE,qBAAeF;AAFqD,KAAD,EAGpEN,aAAa,CAACQ,IAAD,EAAO,OAAP,CAHuD,EAGtCK,cAHsC;AAApC,GAA7B,EAG8CD,KAH9C,CAbN,EAiBJM,OAAO,IAAKtB,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AAAEhB,IAAAA,SAAS,EAAEP,UAAU,CAACmB,aAAD,EAAgBhB,aAAa,CAACQ,IAAD,EAAO,OAAP,CAA7B;AAAvB,GAA3B,EACRL,QADQ,EAERkB,SAFQ,EAGRF,UAHQ,CAjBR,EAqBJ,CAACD,OAAD,IAAYf,QArBR,EAsBJ,CAACe,OAAD,IAAYG,SAtBR,EAuBJ,CAACH,OAAD,IAAYC,UAvBR,CAAR;AAwBH","sourcesContent":["import { __rest } from \"tslib\";\nimport React from 'react';\nimport classnames from 'classnames';\nimport omit from 'lodash/omit';\nimport { filterDOMProps } from 'uniforms';\nimport gridClassName from './gridClassName';\nexport default function wrapField(_a, children) {\n    var { className, disabled, error, errorMessage, grid, // Grid is either an number between 1 and 11 or an object with keys like xs and md.\n    help, // Help text.\n    helpClassName, // Help text class name.\n    id, label, labelClassName, // Label class name (String|Array[String]).\n    required, showInlineError, // Show inline error message?\n    wrapClassName } = _a, // Input wrapper class name.\n    props = __rest(_a, [\"className\", \"disabled\", \"error\", \"errorMessage\", \"grid\", \"help\", \"helpClassName\", \"id\", \"label\", \"labelClassName\", \"required\", \"showInlineError\", \"wrapClassName\"]);\n    const hasWrap = !!(grid || wrapClassName);\n    const blockError = !!(error && showInlineError) && (React.createElement(\"span\", { className: \"form-text text-danger\" }, errorMessage));\n    const blockHelp = !!help && (React.createElement(\"span\", { className: classnames('form-text', helpClassName || 'text-muted') }, help));\n    return (React.createElement(\"div\", Object.assign({ className: classnames(className, 'form-group', {\n            'is-invalid': error,\n            disabled,\n            required,\n            row: grid,\n        }) }, filterDOMProps(omit(props, [\n        'checkboxes',\n        'inline',\n        'inputClassName',\n        'inputRef',\n        'rows',\n        'transform',\n    ]))),\n        label && (React.createElement(\"label\", { htmlFor: id, className: classnames({\n                'col-form-label': grid,\n                'text-danger': error,\n            }, gridClassName(grid, 'label'), labelClassName) }, label)),\n        hasWrap && (React.createElement(\"div\", { className: classnames(wrapClassName, gridClassName(grid, 'input')) },\n            children,\n            blockHelp,\n            blockError)),\n        !hasWrap && children,\n        !hasWrap && blockHelp,\n        !hasWrap && blockError));\n}\n"]},"metadata":{},"sourceType":"module"}