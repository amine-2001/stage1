{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _lodash = require('lodash.foreach');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = require('lodash.isempty');\n\nvar _lodash4 = _interopRequireDefault(_lodash3);\n\nvar _lodash5 = require('lodash.isobject');\n\nvar _lodash6 = _interopRequireDefault(_lodash5);\n\nvar _lodash7 = require('lodash.without');\n\nvar _lodash8 = _interopRequireDefault(_lodash7);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar REMOVED_MARKER = '______MONGO_OBJECT_REMOVED______';\n\nvar MongoObject = function () {\n  /*\n   * @constructor\n   * @param {Object} obj\n   * @param {string[]}  blackboxKeys  - A list of the names of keys that shouldn't be traversed\n   * @returns {undefined}\n   *\n   * Creates a new MongoObject instance. The object passed as the first argument\n   * will be modified in place by calls to instance methods. Also, immediately\n   * upon creation of the instance, the object will have any `undefined` keys\n   * removed recursively.\n   */\n  function MongoObject(obj) {\n    var blackboxKeys = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n    _classCallCheck(this, MongoObject);\n\n    this._obj = obj;\n    this._blackboxKeys = blackboxKeys;\n\n    this._reParseObj();\n  }\n\n  _createClass(MongoObject, [{\n    key: '_reParseObj',\n    value: function _reParseObj() {\n      var blackboxKeys = this._blackboxKeys;\n      this._affectedKeys = {};\n      this._genericAffectedKeys = {};\n      this._positionsByGenericKey = {};\n      this._positionsThatCreateGenericKey = {};\n      this._parentPositions = [];\n      this._positionsInsideArrays = [];\n      this._objectPositions = [];\n      this._arrayItemPositions = [];\n\n      function parseObj(self, val, currentPosition, affectedKey, operator, adjusted, isWithinArray) {\n        // Adjust for first-level modifier operators\n        if (!operator && affectedKey && affectedKey.substring(0, 1) === '$') {\n          operator = affectedKey;\n          affectedKey = null;\n        }\n\n        var affectedKeyIsBlackBox = false;\n        var stop = false;\n\n        if (affectedKey) {\n          // Adjust for $push and $addToSet and $pull and $pop\n          if (!adjusted) {\n            if (operator === '$push' || operator === '$addToSet' || operator === '$pop') {\n              // Adjust for $each\n              // We can simply jump forward and pretend like the $each array\n              // is the array for the field. This has the added benefit of\n              // skipping past any $slice, which we also don't care about.\n              if (MongoObject.isBasicObject(val) && '$each' in val) {\n                val = val.$each;\n                currentPosition = currentPosition + '[$each]';\n              } else {\n                affectedKey = affectedKey + '.0';\n              }\n\n              adjusted = true;\n            } else if (operator === '$pull') {\n              affectedKey = affectedKey + '.0';\n\n              if (MongoObject.isBasicObject(val)) {\n                stop = true;\n              }\n\n              adjusted = true;\n            }\n          } // Make generic key\n\n\n          var affectedKeyGeneric = MongoObject.makeKeyGeneric(affectedKey); // Determine whether affected key should be treated as a black box\n\n          affectedKeyIsBlackBox = blackboxKeys.indexOf(affectedKeyGeneric) > -1; // Mark that this position affects this generic and non-generic key\n\n          if (currentPosition) {\n            (function () {\n              self._affectedKeys[currentPosition] = affectedKey;\n              self._genericAffectedKeys[currentPosition] = affectedKeyGeneric;\n              var positionInfo = {\n                key: affectedKey,\n                operator: operator || null,\n                position: currentPosition\n              };\n              if (!self._positionsByGenericKey[affectedKeyGeneric]) self._positionsByGenericKey[affectedKeyGeneric] = [];\n\n              self._positionsByGenericKey[affectedKeyGeneric].push(positionInfo); // Operators other than $unset will cause ancestor object keys to\n              // be auto-created.\n\n\n              if (operator && operator !== '$unset') {\n                MongoObject.objectsThatGenericKeyWillCreate(affectedKeyGeneric).forEach(function (objGenericKey) {\n                  if (!self._positionsThatCreateGenericKey[objGenericKey]) {\n                    self._positionsThatCreateGenericKey[objGenericKey] = [];\n                  }\n\n                  self._positionsThatCreateGenericKey[objGenericKey].push(positionInfo);\n                });\n              } // If we're within an array, mark this position so we can omit it from flat docs\n\n\n              if (isWithinArray) self._positionsInsideArrays.push(currentPosition);\n            })();\n          }\n        }\n\n        if (stop) return; // Loop through arrays\n\n        if (Array.isArray(val) && val.length > 0) {\n          if (currentPosition) {\n            // Mark positions with arrays that should be ignored when we want endpoints only\n            self._parentPositions.push(currentPosition);\n          } // Loop\n\n\n          (0, _lodash2.default)(val, function (v, i) {\n            if (currentPosition) self._arrayItemPositions.push(currentPosition + '[' + i + ']');\n            parseObj(self, v, currentPosition ? currentPosition + '[' + i + ']' : i, affectedKey + '.' + i, operator, adjusted, true);\n          });\n        } else if (MongoObject.isBasicObject(val) && !affectedKeyIsBlackBox || !currentPosition) {\n          // Loop through object keys, only for basic objects,\n          // but always for the passed-in object, even if it\n          // is a custom object.\n          if (currentPosition && !(0, _lodash4.default)(val)) {\n            // Mark positions with objects that should be ignored when we want endpoints only\n            self._parentPositions.push(currentPosition); // Mark positions with objects that should be left out of flat docs.\n\n\n            self._objectPositions.push(currentPosition);\n          } // Loop\n\n\n          Object.keys(val).forEach(function (k) {\n            var v = val[k];\n\n            if (v === void 0) {\n              delete val[k];\n            } else if (k !== '$slice') {\n              parseObj(self, v, currentPosition ? currentPosition + '[' + k + ']' : k, appendAffectedKey(affectedKey, k), operator, adjusted, isWithinArray);\n            }\n          });\n        }\n      }\n\n      parseObj(this, this._obj);\n    }\n    /**\n     * @method MongoObject.forEachNode\n     * @param {Function} func\n     * @param {Object} [options]\n     * @param {Boolean} [options.endPointsOnly=true] - Only call function for endpoints and not for nodes that contain other nodes\n     * @returns {undefined}\n     *\n     * Runs a function for each endpoint node in the object tree, including all items in every array.\n     * The function arguments are\n     * (1) the value at this node\n     * (2) a string representing the node position\n     * (3) the representation of what would be changed in mongo, using mongo dot notation\n     * (4) the generic equivalent of argument 3, with '$' instead of numeric pieces\n     */\n\n  }, {\n    key: 'forEachNode',\n    value: function forEachNode(func) {\n      var _this = this;\n\n      var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var _ref$endPointsOnly = _ref.endPointsOnly;\n      var endPointsOnly = _ref$endPointsOnly === undefined ? true : _ref$endPointsOnly;\n      if (typeof func !== 'function') throw new Error('filter requires a loop function');\n      var updatedValues = {};\n      Object.keys(this._affectedKeys).forEach(function (position) {\n        if (endPointsOnly && _this._parentPositions.indexOf(position) > -1) return; // Only endpoints\n\n        func.call({\n          value: _this.getValueForPosition(position),\n          isArrayItem: _this._arrayItemPositions.indexOf(position) > -1,\n          operator: extractOp(position),\n          position: position,\n          key: _this._affectedKeys[position],\n          genericKey: _this._genericAffectedKeys[position],\n          updateValue: function updateValue(newVal) {\n            updatedValues[position] = newVal;\n          },\n          remove: function remove() {\n            updatedValues[position] = undefined;\n          }\n        });\n      }); // Actually update/remove values as instructed\n\n      Object.keys(updatedValues).forEach(function (position) {\n        _this.setValueForPosition(position, updatedValues[position]);\n      });\n    }\n  }, {\n    key: 'getValueForPosition',\n    value: function getValueForPosition(position) {\n      var subkeys = position.split('[');\n      var current = this._obj;\n      var ln = subkeys.length;\n\n      for (var i = 0; i < ln; i++) {\n        var subkey = subkeys[i]; // If the subkey ends in ']', remove the ending\n\n        if (subkey.slice(-1) === ']') subkey = subkey.slice(0, -1);\n        current = current[subkey];\n        if (!Array.isArray(current) && !MongoObject.isBasicObject(current) && i < ln - 1) return;\n      }\n\n      if (current === REMOVED_MARKER) return;\n      return current;\n    }\n    /**\n     * @method MongoObject.prototype.setValueForPosition\n     * @param {String} position\n     * @param {Any} value\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'setValueForPosition',\n    value: function setValueForPosition(position, value) {\n      var subkeys = position.split('[');\n      var current = this._obj;\n      var ln = subkeys.length;\n      var createdObjectsOrArrays = false;\n\n      for (var i = 0; i < ln; i++) {\n        var subkey = subkeys[i]; // If the subkey ends in \"]\", remove the ending\n\n        if (subkey.slice(-1) === ']') subkey = subkey.slice(0, -1); // If we've reached the key in the object tree that needs setting or\n        // deleting, do it.\n\n        if (i === ln - 1) {\n          // If value is undefined, delete the property\n          if (value === undefined) {\n            if (Array.isArray(current)) {\n              // We can't just delete it because indexes in the position strings will be off\n              // We will mark it uniquely and then parse this elsewhere\n              current[subkey] = REMOVED_MARKER;\n            } else {\n              delete current[subkey];\n            }\n          } else {\n            current[subkey] = value;\n          }\n        } else {\n          // Otherwise attempt to keep moving deeper into the object.\n          // If we're setting (as opposed to deleting) a key and we hit a place\n          // in the ancestor chain where the keys are not yet created, create them.\n          if (current[subkey] === undefined && value !== undefined) {\n            // See if the next piece is a number\n            var nextPiece = subkeys[i + 1];\n            nextPiece = parseInt(nextPiece, 10);\n            current[subkey] = isNaN(nextPiece) ? {} : [];\n            createdObjectsOrArrays = true;\n          } // Move deeper into the object\n\n\n          current = current[subkey]; // If we can go no further, then quit\n\n          if (!Array.isArray(current) && !MongoObject.isBasicObject(current) && i < ln - 1) return;\n        }\n      } // If there are now new arrays or objects in the main object, we need to reparse it\n\n\n      if (createdObjectsOrArrays || Array.isArray(value) || MongoObject.isBasicObject(value)) {\n        this._reParseObj();\n      }\n    }\n    /**\n     * @method MongoObject.prototype.removeValueForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'removeValueForPosition',\n    value: function removeValueForPosition(position) {\n      this.setValueForPosition(position, undefined);\n    }\n    /**\n     * @method MongoObject.prototype.getKeyForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'getKeyForPosition',\n    value: function getKeyForPosition(position) {\n      return this._affectedKeys[position];\n    }\n    /**\n     * @method MongoObject.prototype.getGenericKeyForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'getGenericKeyForPosition',\n    value: function getGenericKeyForPosition(position) {\n      return this._genericAffectedKeys[position];\n    }\n    /**\n     * @method MongoObject.getInfoForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|Object}\n     *\n     * Returns the value and operator of the requested non-generic key.\n     * Example: {value: 1, operator: \"$pull\"}\n     */\n\n  }, {\n    key: 'getInfoForKey',\n    value: function getInfoForKey(key) {\n      // Get the info\n      var position = this.getPositionForKey(key);\n\n      if (position) {\n        return {\n          value: this.getValueForPosition(position),\n          operator: extractOp(position)\n        };\n      } // If we haven't returned yet, check to see if there is an array value\n      // corresponding to this key\n      // We find the first item within the array, strip the last piece off the\n      // position string, and then return whatever is at that new position in\n      // the original object.\n\n\n      var positions = this.getPositionsForGenericKey(key + '.$');\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = positions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var pos = _step.value;\n          var value = this.getValueForPosition(pos);\n\n          if (value === undefined) {\n            var parentPosition = pos.slice(0, pos.lastIndexOf('['));\n            value = this.getValueForPosition(parentPosition);\n          }\n\n          if (value !== undefined) {\n            return {\n              value: value,\n              operator: extractOp(pos)\n            };\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    /**\n     * @method MongoObject.getPositionForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|String} Position string\n     *\n     * Returns the position string for the place in the object that\n     * affects the requested non-generic key.\n     * Example: 'foo[bar][0]'\n     */\n\n  }, {\n    key: 'getPositionForKey',\n    value: function getPositionForKey(key) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = Object.getOwnPropertyNames(this._affectedKeys)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var position = _step2.value; // We return the first one we find. While it's\n          // possible that multiple update operators could\n          // affect the same non-generic key, we'll assume that's not the case.\n\n          if (this._affectedKeys[position] === key) return position;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n    /**\n     * @method MongoObject.getPositionsForGenericKey\n     * @param {String} genericKey - Generic key\n     * @returns {String[]} Array of position strings\n     *\n     * Returns an array of position strings for the places in the object that\n     * affect the requested generic key.\n     * Example: ['foo[bar][0]']\n     */\n\n  }, {\n    key: 'getPositionsForGenericKey',\n    value: function getPositionsForGenericKey(genericKey) {\n      return this.getPositionsInfoForGenericKey(genericKey).map(function (p) {\n        return p.position;\n      });\n    }\n    /**\n     * @method MongoObject.getPositionsInfoForGenericKey\n     * @param {String} genericKey - Generic key\n     * @returns {Object[]} Array of position info objects\n     *\n     * Returns an array of position info for the places in the object that\n     * affect the requested generic key.\n     */\n\n  }, {\n    key: 'getPositionsInfoForGenericKey',\n    value: function getPositionsInfoForGenericKey(genericKey) {\n      var _this2 = this;\n\n      var positions = this._positionsByGenericKey[genericKey];\n      if (!positions || positions.length === 0) positions = this._positionsByGenericKey[genericKey + '.$'];\n      if (!positions || positions.length === 0) positions = [];\n      return positions.map(function (info) {\n        return Object.assign({\n          value: _this2.getValueForPosition(info.position)\n        }, info);\n      });\n    }\n  }, {\n    key: 'getPositionsThatCreateGenericKey',\n    value: function getPositionsThatCreateGenericKey(genericKey) {\n      return this._positionsThatCreateGenericKey[genericKey] || [];\n    }\n    /**\n     * @deprecated Use getInfoForKey\n     * @method MongoObject.getValueForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|Any}\n     *\n     * Returns the value of the requested non-generic key\n     */\n\n  }, {\n    key: 'getValueForKey',\n    value: function getValueForKey(key) {\n      var position = this.getPositionForKey(key);\n      if (position) return this.getValueForPosition(position);\n    }\n    /**\n     * @method MongoObject.prototype.addKey\n     * @param {String} key - Key to set\n     * @param {Any} val - Value to give this key\n     * @param {String} op - Operator under which to set it, or `null` for a non-modifier object\n     * @returns {undefined}\n     *\n     * Adds `key` with value `val` under operator `op` to the source object.\n     */\n\n  }, {\n    key: 'addKey',\n    value: function addKey(key, val, op) {\n      var position = op ? op + '[' + key + ']' : MongoObject._keyToPosition(key);\n      this.setValueForPosition(position, val);\n    }\n    /**\n     * @method MongoObject.prototype.removeGenericKeys\n     * @param {String[]} keys\n     * @returns {undefined}\n     *\n     * Removes anything that affects any of the generic keys in the list\n     */\n\n  }, {\n    key: 'removeGenericKeys',\n    value: function removeGenericKeys(keys) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var position = _step3.value;\n\n          if (keys.indexOf(this._genericAffectedKeys[position]) > -1) {\n            this.removeValueForPosition(position);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n    /**\n     * @method MongoObject.removeGenericKey\n     * @param {String} key\n     * @returns {undefined}\n     *\n     * Removes anything that affects the requested generic key\n     */\n\n  }, {\n    key: 'removeGenericKey',\n    value: function removeGenericKey(key) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var position = _step4.value;\n\n          if (this._genericAffectedKeys[position] === key) {\n            this.removeValueForPosition(position);\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n    /**\n     * @method MongoObject.removeKey\n     * @param {String} key\n     * @returns {undefined}\n     *\n     * Removes anything that affects the requested non-generic key\n     */\n\n  }, {\n    key: 'removeKey',\n    value: function removeKey(key) {\n      // We don't use getPositionForKey here because we want to be sure to\n      // remove for all positions if there are multiple.\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = Object.getOwnPropertyNames(this._affectedKeys)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var position = _step5.value;\n\n          if (this._affectedKeys[position] === key) {\n            this.removeValueForPosition(position);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n    /**\n     * @method MongoObject.removeKeys\n     * @param {String[]} keys\n     * @returns {undefined}\n     *\n     * Removes anything that affects any of the non-generic keys in the list\n     */\n\n  }, {\n    key: 'removeKeys',\n    value: function removeKeys(keys) {\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = keys[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var key = _step6.value;\n          this.removeKey(key);\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n    /**\n     * @method MongoObject.filterGenericKeys\n     * @param {Function} test - Test function\n     * @returns {undefined}\n     *\n     * Passes all affected keys to a test function, which\n     * should return false to remove whatever is affecting that key\n     */\n\n  }, {\n    key: 'filterGenericKeys',\n    value: function filterGenericKeys(test) {\n      var checkedKeys = [];\n      var keysToRemove = [];\n\n      for (var position in this._genericAffectedKeys) {\n        if (this._genericAffectedKeys.hasOwnProperty(position)) {\n          var genericKey = this._genericAffectedKeys[position];\n\n          if (checkedKeys.indexOf(genericKey) === -1) {\n            checkedKeys.push(genericKey);\n\n            if (genericKey && !test(genericKey)) {\n              keysToRemove.push(genericKey);\n            }\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = keysToRemove[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var key = _step7.value;\n          this.removeGenericKey(key);\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n    }\n    /**\n     * @method MongoObject.setValueForKey\n     * @param {String} key\n     * @param {Any} val\n     * @returns {undefined}\n     *\n     * Sets the value for every place in the object that affects\n     * the requested non-generic key\n     */\n\n  }, {\n    key: 'setValueForKey',\n    value: function setValueForKey(key, val) {\n      // We don't use getPositionForKey here because we want to be sure to\n      // set the value for all positions if there are multiple.\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = Object.getOwnPropertyNames(this._affectedKeys)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var position = _step8.value;\n\n          if (this._affectedKeys[position] === key) {\n            this.setValueForPosition(position, val);\n          }\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    }\n    /**\n     * @method MongoObject.setValueForGenericKey\n     * @param {String} key\n     * @param {Any} val\n     * @returns {undefined}\n     *\n     * Sets the value for every place in the object that affects\n     * the requested generic key\n     */\n\n  }, {\n    key: 'setValueForGenericKey',\n    value: function setValueForGenericKey(key, val) {\n      // We don't use getPositionForKey here because we want to be sure to\n      // set the value for all positions if there are multiple.\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var position = _step9.value;\n\n          if (this._genericAffectedKeys[position] === key) {\n            this.setValueForPosition(position, val);\n          }\n        }\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'removeArrayItems',\n    value: function removeArrayItems() {\n      // Traverse and pull out removed array items at this point\n      function traverse(obj) {\n        (0, _lodash2.default)(obj, function (val, indexOrProp) {\n          // Move deeper into the object\n          var next = obj[indexOrProp]; // If we can go no further, then quit\n\n          if (MongoObject.isBasicObject(next)) {\n            traverse(next);\n          } else if (Array.isArray(next)) {\n            obj[indexOrProp] = (0, _lodash8.default)(next, REMOVED_MARKER);\n            traverse(obj[indexOrProp]);\n          }\n        });\n      }\n\n      traverse(this._obj);\n    }\n    /**\n     * @method MongoObject.getObject\n     * @returns {Object}\n     *\n     * Get the source object, potentially modified by other method calls on this\n     * MongoObject instance.\n     */\n\n  }, {\n    key: 'getObject',\n    value: function getObject() {\n      return this._obj;\n    }\n    /**\n     * @method MongoObject.getFlatObject\n     * @returns {Object}\n     *\n     * Gets a flat object based on the MongoObject instance.\n     * In a flat object, the key is the name of the non-generic affectedKey,\n     * with mongo dot notation if necessary, and the value is the value for\n     * that key.\n     *\n     * With `keepArrays: true`, we don't flatten within arrays. Currently\n     * MongoDB does not see a key such as `a.0.b` and automatically assume\n     * an array. Instead it would create an object with key '0' if there\n     * wasn't already an array saved as the value of `a`, which is rarely\n     * if ever what we actually want. To avoid this confusion, we\n     * set entire arrays.\n     */\n\n  }, {\n    key: 'getFlatObject',\n    value: function getFlatObject() {\n      var _this3 = this;\n\n      var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var _ref2$keepArrays = _ref2.keepArrays;\n      var keepArrays = _ref2$keepArrays === undefined ? false : _ref2$keepArrays;\n      var newObj = {};\n      Object.keys(this._affectedKeys).forEach(function (position) {\n        var affectedKey = _this3._affectedKeys[position];\n\n        if (typeof affectedKey === 'string' && keepArrays === true && _this3._positionsInsideArrays.indexOf(position) === -1 && _this3._objectPositions.indexOf(position) === -1 || keepArrays !== true && _this3._parentPositions.indexOf(position) === -1) {\n          newObj[affectedKey] = _this3.getValueForPosition(position);\n        }\n      });\n      return newObj;\n    }\n    /**\n     * @method MongoObject.affectsKey\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Returns true if the non-generic key is affected by this object\n     */\n\n  }, {\n    key: 'affectsKey',\n    value: function affectsKey(key) {\n      return !!this.getPositionForKey(key);\n    }\n    /**\n     * @method MongoObject.affectsGenericKey\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Returns true if the generic key is affected by this object\n     */\n\n  }, {\n    key: 'affectsGenericKey',\n    value: function affectsGenericKey(key) {\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var position = _step10.value;\n          if (this._genericAffectedKeys[position] === key) return true;\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\n     * @method MongoObject.affectsGenericKeyImplicit\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Like affectsGenericKey, but will return true if a child key is affected\n     */\n\n  }, {\n    key: 'affectsGenericKeyImplicit',\n    value: function affectsGenericKeyImplicit(key) {\n      var _iteratorNormalCompletion11 = true;\n      var _didIteratorError11 = false;\n      var _iteratorError11 = undefined;\n\n      try {\n        for (var _iterator11 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n          var position = _step11.value;\n          var affectedKey = this._genericAffectedKeys[position];\n          if (genericKeyAffectsOtherGenericKey(key, affectedKey)) return true;\n        }\n      } catch (err) {\n        _didIteratorError11 = true;\n        _iteratorError11 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion11 && _iterator11.return) {\n            _iterator11.return();\n          }\n        } finally {\n          if (_didIteratorError11) {\n            throw _iteratorError11;\n          }\n        }\n      }\n\n      return false;\n    }\n    /* STATIC */\n\n    /* Takes a specific string that uses mongo-style dot notation\n     * and returns a generic string equivalent. Replaces all numeric\n     * \"pieces\" with a dollar sign ($).\n     *\n     * @param {type} name\n     * @returns {String} Generic name.\n     */\n\n  }], [{\n    key: 'makeKeyGeneric',\n    value: function makeKeyGeneric(key) {\n      if (typeof key !== 'string') return null;\n      return key.replace(/\\.[0-9]+(?=\\.|$)/g, '.$');\n    }\n    /** Takes a string representation of an object key and its value\n     *  and updates \"obj\" to contain that key with that value.\n     *\n     *  Example keys and results if val is 1:\n     *    \"a\" -> {a: 1}\n     *    \"a[b]\" -> {a: {b: 1}}\n     *    \"a[b][0]\" -> {a: {b: [1]}}\n     *    'a[b.0.c]' -> {a: {'b.0.c': 1}}\n     *\n     * @param {any} val\n     * @param {String} key\n     * @param {Object} obj\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'expandKey',\n    value: function expandKey(val, key, obj) {\n      var subkeys = key.split('[');\n      var current = obj;\n\n      for (var i = 0, ln = subkeys.length; i < ln; i++) {\n        var subkey = subkeys[i];\n\n        if (subkey.slice(-1) === ']') {\n          subkey = subkey.slice(0, -1);\n        }\n\n        if (i === ln - 1) {\n          // Last iteration; time to set the value; always overwrite\n          current[subkey] = val; // If val is undefined, delete the property\n\n          if (val === void 0) delete current[subkey];\n        } else {\n          // See if the next piece is a number\n          var nextPiece = subkeys[i + 1];\n          nextPiece = parseInt(nextPiece, 10);\n\n          if (!current[subkey]) {\n            current[subkey] = isNaN(nextPiece) ? {} : [];\n          }\n        }\n\n        current = current[subkey];\n      }\n    }\n  }, {\n    key: '_keyToPosition',\n    value: function _keyToPosition(key, wrapAll) {\n      var position = '';\n      (0, _lodash2.default)(key.split('.'), function (piece, i) {\n        if (i === 0 && !wrapAll) {\n          position += piece;\n        } else {\n          position += '[' + piece + ']';\n        }\n      });\n      return position;\n    }\n    /**\n     * @method MongoObject._positionToKey\n     * @param {String} position\n     * @returns {String} The key that this position in an object would affect.\n     *\n     * This is different from MongoObject.prototype.getKeyForPosition in that\n     * this method does not depend on the requested position actually being\n     * present in any particular MongoObject.\n     */\n\n  }, {\n    key: '_positionToKey',\n    value: function _positionToKey(position) {\n      // XXX Probably a better way to do this, but this is\n      // foolproof for now.\n      var mDoc = new MongoObject({});\n      mDoc.setValueForPosition(position, 1); // Value doesn't matter\n\n      return mDoc.getKeyForPosition(position);\n    }\n    /**\n     * @method MongoObject.cleanNulls\n     * @public\n     * @param {Object} doc - Source object\n     * @returns {Object}\n     *\n     * Returns an object in which all properties with null, undefined, or empty\n     * string values have been removed, recursively.\n     */\n\n  }, {\n    key: 'cleanNulls',\n    value: function cleanNulls(doc, isArray, keepEmptyStrings) {\n      var newDoc = isArray ? [] : {};\n      Object.keys(doc).forEach(function (key) {\n        var val = doc[key];\n\n        if (!Array.isArray(val) && MongoObject.isBasicObject(val)) {\n          val = MongoObject.cleanNulls(val, false, keepEmptyStrings); // Recurse into plain objects\n\n          if (!(0, _lodash4.default)(val)) newDoc[key] = val;\n        } else if (Array.isArray(val)) {\n          val = MongoObject.cleanNulls(val, true, keepEmptyStrings); // Recurse into non-typed arrays\n\n          if (!(0, _lodash4.default)(val)) newDoc[key] = val;\n        } else if (!isNullUndefinedOrEmptyString(val)) {\n          newDoc[key] = val;\n        } else if (keepEmptyStrings && typeof val === 'string' && val.length === 0) {\n          newDoc[key] = val;\n        }\n      });\n      return newDoc;\n    }\n    /**\n     * @method MongoObject.reportNulls\n     * @public\n     * @param {Object} flatDoc - An object with no properties that are also objects.\n     * @returns {Object} An object in which the keys represent the keys in the\n     * original object that were null, undefined, or empty strings, and the value\n     * of each key is \"\".\n     */\n\n  }, {\n    key: 'reportNulls',\n    value: function reportNulls(flatDoc, keepEmptyStrings) {\n      var nulls = {}; // Loop through the flat doc\n\n      Object.keys(flatDoc).forEach(function (key) {\n        var val = flatDoc[key];\n\n        if (val === null || val === undefined || !keepEmptyStrings && typeof val === 'string' && val.length === 0 || // If value is an array in which all the values recursively are undefined, null,\n        // or an empty string\n        Array.isArray(val) && MongoObject.cleanNulls(val, true, keepEmptyStrings).length === 0) {\n          nulls[key] = '';\n        }\n      });\n      return nulls;\n    }\n    /**\n     * @method MongoObject.docToModifier\n     * @public\n     * @param {Object} doc - An object to be converted into a MongoDB modifier\n     * @param {Object} [options] - Options\n     * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.\n     * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.\n     * @returns {Object} A MongoDB modifier.\n     *\n     * Converts an object into a modifier by flattening it, putting keys with\n     * null, undefined, and empty string values into `modifier.$unset`, and\n     * putting the rest of the keys into `modifier.$set`.\n     */\n\n  }, {\n    key: 'docToModifier',\n    value: function docToModifier(doc) {\n      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var _ref3$keepArrays = _ref3.keepArrays;\n      var keepArrays = _ref3$keepArrays === undefined ? false : _ref3$keepArrays;\n      var _ref3$keepEmptyString = _ref3.keepEmptyStrings;\n      var keepEmptyStrings = _ref3$keepEmptyString === undefined ? false : _ref3$keepEmptyString; // Flatten doc\n\n      var mDoc = new MongoObject(doc);\n      var flatDoc = mDoc.getFlatObject({\n        keepArrays: keepArrays\n      }); // Get a list of null, undefined, and empty string values so we can unset them instead\n\n      var nulls = MongoObject.reportNulls(flatDoc, keepEmptyStrings);\n      flatDoc = MongoObject.cleanNulls(flatDoc, false, keepEmptyStrings);\n      var modifier = {};\n      if (!(0, _lodash4.default)(flatDoc)) modifier.$set = flatDoc;\n      if (!(0, _lodash4.default)(nulls)) modifier.$unset = nulls;\n      return modifier;\n    }\n    /* Tests whether \"obj\" is an Object as opposed to\n     * something that inherits from Object\n     *\n     * @param {any} obj\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'isBasicObject',\n    value: function isBasicObject(obj) {\n      return obj === Object(obj) && Object.getPrototypeOf(obj) === Object.prototype;\n    }\n    /**\n     * @method MongoObject.objAffectsKey\n     * @public\n     * @param  {Object} obj\n     * @param  {String} key\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'objAffectsKey',\n    value: function objAffectsKey(obj, key) {\n      var mDoc = new MongoObject(obj);\n      return mDoc.affectsKey(key);\n    }\n    /**\n     * @method MongoObject.objectsThatGenericKeyWillCreate\n     * @public\n     * @param  {String} genericKey\n     * @return {String[]} Array of other generic keys that would be created\n     *                    by this generic key\n     */\n\n  }, {\n    key: 'objectsThatGenericKeyWillCreate',\n    value: function objectsThatGenericKeyWillCreate(genericKey) {\n      var objs = [];\n\n      do {\n        var lastDotPosition = genericKey.lastIndexOf('.');\n        genericKey = lastDotPosition === -1 ? '' : genericKey.slice(0, lastDotPosition);\n        if (genericKey.length && !genericKey.endsWith('.$')) objs.push(genericKey);\n      } while (genericKey.length);\n\n      return objs;\n    }\n    /**\n     * @method MongoObject.expandObj\n     * @public\n     * @param  {Object} doc\n     * @return {Object}\n     *\n     * Takes a flat object and returns an expanded version of it.\n     */\n\n  }, {\n    key: 'expandObj',\n    value: function expandObj(doc) {\n      var newDoc = {};\n      Object.keys(doc).forEach(function (key) {\n        var val = doc[key];\n        var subkeys = key.split('.');\n        var subkeylen = subkeys.length;\n        var current = newDoc;\n\n        for (var i = 0; i < subkeylen; i++) {\n          var subkey = subkeys[i];\n\n          if (typeof current[subkey] !== 'undefined' && !(0, _lodash6.default)(current[subkey])) {\n            break; // Already set for some reason; leave it alone\n          }\n\n          if (i === subkeylen - 1) {\n            // Last iteration; time to set the value\n            current[subkey] = val;\n          } else {\n            // See if the next piece is a number\n            var nextPiece = subkeys[i + 1];\n            nextPiece = parseInt(nextPiece, 10);\n\n            if (isNaN(nextPiece) && !(0, _lodash6.default)(current[subkey])) {\n              current[subkey] = {};\n            } else if (!isNaN(nextPiece) && !Array.isArray(current[subkey])) {\n              current[subkey] = [];\n            }\n          }\n\n          current = current[subkey];\n        }\n      });\n      return newDoc;\n    }\n  }]);\n\n  return MongoObject;\n}();\n/* PRIVATE */\n\n\nexports.default = MongoObject;\n\nfunction appendAffectedKey(affectedKey, key) {\n  if (key === '$each') return affectedKey;\n  return affectedKey ? affectedKey + '.' + key : key;\n} // Extracts operator piece, if present, from position string\n\n\nfunction extractOp(position) {\n  var firstPositionPiece = position.slice(0, position.indexOf('['));\n  return firstPositionPiece.substring(0, 1) === '$' ? firstPositionPiece : null;\n}\n\nfunction genericKeyAffectsOtherGenericKey(key, affectedKey) {\n  // If the affected key is the test key\n  if (affectedKey === key) return true; // If the affected key implies the test key because the affected key\n  // starts with the test key followed by a period\n\n  if (affectedKey.substring(0, key.length + 1) === key + '.') return true; // If the affected key implies the test key because the affected key\n  // starts with the test key and the test key ends with \".$\"\n\n  var lastTwo = key.slice(-2);\n  if (lastTwo === '.$' && key.slice(0, -2) === affectedKey) return true;\n  return false;\n}\n\nfunction isNullUndefinedOrEmptyString(val) {\n  return val === undefined || val === null || typeof val === 'string' && val.length === 0;\n}","map":{"version":3,"sources":["C:/Users/asus/Desktop/new template/myadmin-lite/node_modules/mongo-object/dist/mongo-object.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_lodash","require","_lodash2","_interopRequireDefault","_lodash3","_lodash4","_lodash5","_lodash6","_lodash7","_lodash8","obj","__esModule","default","_classCallCheck","instance","TypeError","REMOVED_MARKER","MongoObject","blackboxKeys","arguments","undefined","_obj","_blackboxKeys","_reParseObj","_affectedKeys","_genericAffectedKeys","_positionsByGenericKey","_positionsThatCreateGenericKey","_parentPositions","_positionsInsideArrays","_objectPositions","_arrayItemPositions","parseObj","self","val","currentPosition","affectedKey","operator","adjusted","isWithinArray","substring","affectedKeyIsBlackBox","stop","isBasicObject","$each","affectedKeyGeneric","makeKeyGeneric","indexOf","positionInfo","position","push","objectsThatGenericKeyWillCreate","forEach","objGenericKey","Array","isArray","v","keys","k","appendAffectedKey","forEachNode","func","_this","_ref","_ref$endPointsOnly","endPointsOnly","Error","updatedValues","call","getValueForPosition","isArrayItem","extractOp","genericKey","updateValue","newVal","remove","setValueForPosition","subkeys","split","current","ln","subkey","slice","createdObjectsOrArrays","nextPiece","parseInt","isNaN","removeValueForPosition","getKeyForPosition","getGenericKeyForPosition","getInfoForKey","getPositionForKey","positions","getPositionsForGenericKey","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","pos","parentPosition","lastIndexOf","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","getOwnPropertyNames","_step2","getPositionsInfoForGenericKey","map","p","_this2","info","assign","getPositionsThatCreateGenericKey","getValueForKey","addKey","op","_keyToPosition","removeGenericKeys","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","removeGenericKey","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","removeKey","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","removeKeys","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","filterGenericKeys","test","checkedKeys","keysToRemove","hasOwnProperty","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","setValueForKey","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","setValueForGenericKey","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_iterator9","_step9","removeArrayItems","traverse","indexOrProp","getObject","getFlatObject","_this3","_ref2","_ref2$keepArrays","keepArrays","newObj","affectsKey","affectsGenericKey","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_iterator10","_step10","affectsGenericKeyImplicit","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_iterator11","_step11","genericKeyAffectsOtherGenericKey","replace","expandKey","wrapAll","piece","_positionToKey","mDoc","cleanNulls","doc","keepEmptyStrings","newDoc","isNullUndefinedOrEmptyString","reportNulls","flatDoc","nulls","docToModifier","_ref3","_ref3$keepArrays","_ref3$keepEmptyString","modifier","$set","$unset","getPrototypeOf","objAffectsKey","objs","lastDotPosition","endsWith","expandObj","subkeylen","firstPositionPiece","lastTwo"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash.foreach');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = require('lodash.isempty');\n\nvar _lodash4 = _interopRequireDefault(_lodash3);\n\nvar _lodash5 = require('lodash.isobject');\n\nvar _lodash6 = _interopRequireDefault(_lodash5);\n\nvar _lodash7 = require('lodash.without');\n\nvar _lodash8 = _interopRequireDefault(_lodash7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar REMOVED_MARKER = '______MONGO_OBJECT_REMOVED______';\n\nvar MongoObject = function () {\n  /*\n   * @constructor\n   * @param {Object} obj\n   * @param {string[]}  blackboxKeys  - A list of the names of keys that shouldn't be traversed\n   * @returns {undefined}\n   *\n   * Creates a new MongoObject instance. The object passed as the first argument\n   * will be modified in place by calls to instance methods. Also, immediately\n   * upon creation of the instance, the object will have any `undefined` keys\n   * removed recursively.\n   */\n\n  function MongoObject(obj) {\n    var blackboxKeys = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n    _classCallCheck(this, MongoObject);\n\n    this._obj = obj;\n    this._blackboxKeys = blackboxKeys;\n    this._reParseObj();\n  }\n\n  _createClass(MongoObject, [{\n    key: '_reParseObj',\n    value: function _reParseObj() {\n      var blackboxKeys = this._blackboxKeys;\n\n      this._affectedKeys = {};\n      this._genericAffectedKeys = {};\n      this._positionsByGenericKey = {};\n      this._positionsThatCreateGenericKey = {};\n      this._parentPositions = [];\n      this._positionsInsideArrays = [];\n      this._objectPositions = [];\n      this._arrayItemPositions = [];\n\n      function parseObj(self, val, currentPosition, affectedKey, operator, adjusted, isWithinArray) {\n        // Adjust for first-level modifier operators\n        if (!operator && affectedKey && affectedKey.substring(0, 1) === '$') {\n          operator = affectedKey;\n          affectedKey = null;\n        }\n\n        var affectedKeyIsBlackBox = false;\n        var stop = false;\n        if (affectedKey) {\n          // Adjust for $push and $addToSet and $pull and $pop\n          if (!adjusted) {\n            if (operator === '$push' || operator === '$addToSet' || operator === '$pop') {\n              // Adjust for $each\n              // We can simply jump forward and pretend like the $each array\n              // is the array for the field. This has the added benefit of\n              // skipping past any $slice, which we also don't care about.\n              if (MongoObject.isBasicObject(val) && '$each' in val) {\n                val = val.$each;\n                currentPosition = currentPosition + '[$each]';\n              } else {\n                affectedKey = affectedKey + '.0';\n              }\n\n              adjusted = true;\n            } else if (operator === '$pull') {\n              affectedKey = affectedKey + '.0';\n              if (MongoObject.isBasicObject(val)) {\n                stop = true;\n              }\n\n              adjusted = true;\n            }\n          }\n\n          // Make generic key\n          var affectedKeyGeneric = MongoObject.makeKeyGeneric(affectedKey);\n\n          // Determine whether affected key should be treated as a black box\n          affectedKeyIsBlackBox = blackboxKeys.indexOf(affectedKeyGeneric) > -1;\n\n          // Mark that this position affects this generic and non-generic key\n          if (currentPosition) {\n            (function () {\n              self._affectedKeys[currentPosition] = affectedKey;\n              self._genericAffectedKeys[currentPosition] = affectedKeyGeneric;\n\n              var positionInfo = {\n                key: affectedKey,\n                operator: operator || null,\n                position: currentPosition\n              };\n\n              if (!self._positionsByGenericKey[affectedKeyGeneric]) self._positionsByGenericKey[affectedKeyGeneric] = [];\n              self._positionsByGenericKey[affectedKeyGeneric].push(positionInfo);\n\n              // Operators other than $unset will cause ancestor object keys to\n              // be auto-created.\n              if (operator && operator !== '$unset') {\n                MongoObject.objectsThatGenericKeyWillCreate(affectedKeyGeneric).forEach(function (objGenericKey) {\n                  if (!self._positionsThatCreateGenericKey[objGenericKey]) {\n                    self._positionsThatCreateGenericKey[objGenericKey] = [];\n                  }\n                  self._positionsThatCreateGenericKey[objGenericKey].push(positionInfo);\n                });\n              }\n\n              // If we're within an array, mark this position so we can omit it from flat docs\n              if (isWithinArray) self._positionsInsideArrays.push(currentPosition);\n            })();\n          }\n        }\n\n        if (stop) return;\n\n        // Loop through arrays\n        if (Array.isArray(val) && val.length > 0) {\n          if (currentPosition) {\n            // Mark positions with arrays that should be ignored when we want endpoints only\n            self._parentPositions.push(currentPosition);\n          }\n\n          // Loop\n          (0, _lodash2.default)(val, function (v, i) {\n            if (currentPosition) self._arrayItemPositions.push(currentPosition + '[' + i + ']');\n            parseObj(self, v, currentPosition ? currentPosition + '[' + i + ']' : i, affectedKey + '.' + i, operator, adjusted, true);\n          });\n        } else if (MongoObject.isBasicObject(val) && !affectedKeyIsBlackBox || !currentPosition) {\n          // Loop through object keys, only for basic objects,\n          // but always for the passed-in object, even if it\n          // is a custom object.\n\n          if (currentPosition && !(0, _lodash4.default)(val)) {\n            // Mark positions with objects that should be ignored when we want endpoints only\n            self._parentPositions.push(currentPosition);\n\n            // Mark positions with objects that should be left out of flat docs.\n            self._objectPositions.push(currentPosition);\n          }\n\n          // Loop\n          Object.keys(val).forEach(function (k) {\n            var v = val[k];\n\n            if (v === void 0) {\n              delete val[k];\n            } else if (k !== '$slice') {\n              parseObj(self, v, currentPosition ? currentPosition + '[' + k + ']' : k, appendAffectedKey(affectedKey, k), operator, adjusted, isWithinArray);\n            }\n          });\n        }\n      }\n\n      parseObj(this, this._obj);\n    }\n\n    /**\n     * @method MongoObject.forEachNode\n     * @param {Function} func\n     * @param {Object} [options]\n     * @param {Boolean} [options.endPointsOnly=true] - Only call function for endpoints and not for nodes that contain other nodes\n     * @returns {undefined}\n     *\n     * Runs a function for each endpoint node in the object tree, including all items in every array.\n     * The function arguments are\n     * (1) the value at this node\n     * (2) a string representing the node position\n     * (3) the representation of what would be changed in mongo, using mongo dot notation\n     * (4) the generic equivalent of argument 3, with '$' instead of numeric pieces\n     */\n\n  }, {\n    key: 'forEachNode',\n    value: function forEachNode(func) {\n      var _this = this;\n\n      var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var _ref$endPointsOnly = _ref.endPointsOnly;\n      var endPointsOnly = _ref$endPointsOnly === undefined ? true : _ref$endPointsOnly;\n\n      if (typeof func !== 'function') throw new Error('filter requires a loop function');\n\n      var updatedValues = {};\n      Object.keys(this._affectedKeys).forEach(function (position) {\n        if (endPointsOnly && _this._parentPositions.indexOf(position) > -1) return; // Only endpoints\n        func.call({\n          value: _this.getValueForPosition(position),\n          isArrayItem: _this._arrayItemPositions.indexOf(position) > -1,\n          operator: extractOp(position),\n          position: position,\n          key: _this._affectedKeys[position],\n          genericKey: _this._genericAffectedKeys[position],\n          updateValue: function updateValue(newVal) {\n            updatedValues[position] = newVal;\n          },\n          remove: function remove() {\n            updatedValues[position] = undefined;\n          }\n        });\n      });\n\n      // Actually update/remove values as instructed\n      Object.keys(updatedValues).forEach(function (position) {\n        _this.setValueForPosition(position, updatedValues[position]);\n      });\n    }\n  }, {\n    key: 'getValueForPosition',\n    value: function getValueForPosition(position) {\n      var subkeys = position.split('[');\n      var current = this._obj;\n      var ln = subkeys.length;\n      for (var i = 0; i < ln; i++) {\n        var subkey = subkeys[i];\n\n        // If the subkey ends in ']', remove the ending\n        if (subkey.slice(-1) === ']') subkey = subkey.slice(0, -1);\n        current = current[subkey];\n        if (!Array.isArray(current) && !MongoObject.isBasicObject(current) && i < ln - 1) return;\n      }\n\n      if (current === REMOVED_MARKER) return;\n      return current;\n    }\n\n    /**\n     * @method MongoObject.prototype.setValueForPosition\n     * @param {String} position\n     * @param {Any} value\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'setValueForPosition',\n    value: function setValueForPosition(position, value) {\n      var subkeys = position.split('[');\n      var current = this._obj;\n      var ln = subkeys.length;\n\n      var createdObjectsOrArrays = false;\n      for (var i = 0; i < ln; i++) {\n        var subkey = subkeys[i];\n\n        // If the subkey ends in \"]\", remove the ending\n        if (subkey.slice(-1) === ']') subkey = subkey.slice(0, -1);\n\n        // If we've reached the key in the object tree that needs setting or\n        // deleting, do it.\n        if (i === ln - 1) {\n          // If value is undefined, delete the property\n          if (value === undefined) {\n            if (Array.isArray(current)) {\n              // We can't just delete it because indexes in the position strings will be off\n              // We will mark it uniquely and then parse this elsewhere\n              current[subkey] = REMOVED_MARKER;\n            } else {\n              delete current[subkey];\n            }\n          } else {\n            current[subkey] = value;\n          }\n        } else {\n          // Otherwise attempt to keep moving deeper into the object.\n          // If we're setting (as opposed to deleting) a key and we hit a place\n          // in the ancestor chain where the keys are not yet created, create them.\n          if (current[subkey] === undefined && value !== undefined) {\n            // See if the next piece is a number\n            var nextPiece = subkeys[i + 1];\n            nextPiece = parseInt(nextPiece, 10);\n            current[subkey] = isNaN(nextPiece) ? {} : [];\n            createdObjectsOrArrays = true;\n          }\n\n          // Move deeper into the object\n          current = current[subkey];\n\n          // If we can go no further, then quit\n          if (!Array.isArray(current) && !MongoObject.isBasicObject(current) && i < ln - 1) return;\n        }\n      }\n\n      // If there are now new arrays or objects in the main object, we need to reparse it\n      if (createdObjectsOrArrays || Array.isArray(value) || MongoObject.isBasicObject(value)) {\n        this._reParseObj();\n      }\n    }\n\n    /**\n     * @method MongoObject.prototype.removeValueForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'removeValueForPosition',\n    value: function removeValueForPosition(position) {\n      this.setValueForPosition(position, undefined);\n    }\n\n    /**\n     * @method MongoObject.prototype.getKeyForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'getKeyForPosition',\n    value: function getKeyForPosition(position) {\n      return this._affectedKeys[position];\n    }\n\n    /**\n     * @method MongoObject.prototype.getGenericKeyForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'getGenericKeyForPosition',\n    value: function getGenericKeyForPosition(position) {\n      return this._genericAffectedKeys[position];\n    }\n\n    /**\n     * @method MongoObject.getInfoForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|Object}\n     *\n     * Returns the value and operator of the requested non-generic key.\n     * Example: {value: 1, operator: \"$pull\"}\n     */\n\n  }, {\n    key: 'getInfoForKey',\n    value: function getInfoForKey(key) {\n      // Get the info\n      var position = this.getPositionForKey(key);\n      if (position) {\n        return {\n          value: this.getValueForPosition(position),\n          operator: extractOp(position)\n        };\n      }\n\n      // If we haven't returned yet, check to see if there is an array value\n      // corresponding to this key\n      // We find the first item within the array, strip the last piece off the\n      // position string, and then return whatever is at that new position in\n      // the original object.\n      var positions = this.getPositionsForGenericKey(key + '.$');\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = positions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var pos = _step.value;\n\n          var value = this.getValueForPosition(pos);\n          if (value === undefined) {\n            var parentPosition = pos.slice(0, pos.lastIndexOf('['));\n            value = this.getValueForPosition(parentPosition);\n          }\n\n          if (value !== undefined) {\n            return {\n              value: value,\n              operator: extractOp(pos)\n            };\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    /**\n     * @method MongoObject.getPositionForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|String} Position string\n     *\n     * Returns the position string for the place in the object that\n     * affects the requested non-generic key.\n     * Example: 'foo[bar][0]'\n     */\n\n  }, {\n    key: 'getPositionForKey',\n    value: function getPositionForKey(key) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = Object.getOwnPropertyNames(this._affectedKeys)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var position = _step2.value;\n\n          // We return the first one we find. While it's\n          // possible that multiple update operators could\n          // affect the same non-generic key, we'll assume that's not the case.\n          if (this._affectedKeys[position] === key) return position;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    /**\n     * @method MongoObject.getPositionsForGenericKey\n     * @param {String} genericKey - Generic key\n     * @returns {String[]} Array of position strings\n     *\n     * Returns an array of position strings for the places in the object that\n     * affect the requested generic key.\n     * Example: ['foo[bar][0]']\n     */\n\n  }, {\n    key: 'getPositionsForGenericKey',\n    value: function getPositionsForGenericKey(genericKey) {\n      return this.getPositionsInfoForGenericKey(genericKey).map(function (p) {\n        return p.position;\n      });\n    }\n\n    /**\n     * @method MongoObject.getPositionsInfoForGenericKey\n     * @param {String} genericKey - Generic key\n     * @returns {Object[]} Array of position info objects\n     *\n     * Returns an array of position info for the places in the object that\n     * affect the requested generic key.\n     */\n\n  }, {\n    key: 'getPositionsInfoForGenericKey',\n    value: function getPositionsInfoForGenericKey(genericKey) {\n      var _this2 = this;\n\n      var positions = this._positionsByGenericKey[genericKey];\n      if (!positions || positions.length === 0) positions = this._positionsByGenericKey[genericKey + '.$'];\n      if (!positions || positions.length === 0) positions = [];\n      return positions.map(function (info) {\n        return Object.assign({\n          value: _this2.getValueForPosition(info.position)\n        }, info);\n      });\n    }\n  }, {\n    key: 'getPositionsThatCreateGenericKey',\n    value: function getPositionsThatCreateGenericKey(genericKey) {\n      return this._positionsThatCreateGenericKey[genericKey] || [];\n    }\n\n    /**\n     * @deprecated Use getInfoForKey\n     * @method MongoObject.getValueForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|Any}\n     *\n     * Returns the value of the requested non-generic key\n     */\n\n  }, {\n    key: 'getValueForKey',\n    value: function getValueForKey(key) {\n      var position = this.getPositionForKey(key);\n      if (position) return this.getValueForPosition(position);\n    }\n\n    /**\n     * @method MongoObject.prototype.addKey\n     * @param {String} key - Key to set\n     * @param {Any} val - Value to give this key\n     * @param {String} op - Operator under which to set it, or `null` for a non-modifier object\n     * @returns {undefined}\n     *\n     * Adds `key` with value `val` under operator `op` to the source object.\n     */\n\n  }, {\n    key: 'addKey',\n    value: function addKey(key, val, op) {\n      var position = op ? op + '[' + key + ']' : MongoObject._keyToPosition(key);\n      this.setValueForPosition(position, val);\n    }\n\n    /**\n     * @method MongoObject.prototype.removeGenericKeys\n     * @param {String[]} keys\n     * @returns {undefined}\n     *\n     * Removes anything that affects any of the generic keys in the list\n     */\n\n  }, {\n    key: 'removeGenericKeys',\n    value: function removeGenericKeys(keys) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var position = _step3.value;\n\n          if (keys.indexOf(this._genericAffectedKeys[position]) > -1) {\n            this.removeValueForPosition(position);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n\n    /**\n     * @method MongoObject.removeGenericKey\n     * @param {String} key\n     * @returns {undefined}\n     *\n     * Removes anything that affects the requested generic key\n     */\n\n  }, {\n    key: 'removeGenericKey',\n    value: function removeGenericKey(key) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var position = _step4.value;\n\n          if (this._genericAffectedKeys[position] === key) {\n            this.removeValueForPosition(position);\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n\n    /**\n     * @method MongoObject.removeKey\n     * @param {String} key\n     * @returns {undefined}\n     *\n     * Removes anything that affects the requested non-generic key\n     */\n\n  }, {\n    key: 'removeKey',\n    value: function removeKey(key) {\n      // We don't use getPositionForKey here because we want to be sure to\n      // remove for all positions if there are multiple.\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = Object.getOwnPropertyNames(this._affectedKeys)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var position = _step5.value;\n\n          if (this._affectedKeys[position] === key) {\n            this.removeValueForPosition(position);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n\n    /**\n     * @method MongoObject.removeKeys\n     * @param {String[]} keys\n     * @returns {undefined}\n     *\n     * Removes anything that affects any of the non-generic keys in the list\n     */\n\n  }, {\n    key: 'removeKeys',\n    value: function removeKeys(keys) {\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = keys[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var key = _step6.value;\n\n          this.removeKey(key);\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n\n    /**\n     * @method MongoObject.filterGenericKeys\n     * @param {Function} test - Test function\n     * @returns {undefined}\n     *\n     * Passes all affected keys to a test function, which\n     * should return false to remove whatever is affecting that key\n     */\n\n  }, {\n    key: 'filterGenericKeys',\n    value: function filterGenericKeys(test) {\n      var checkedKeys = [];\n      var keysToRemove = [];\n      for (var position in this._genericAffectedKeys) {\n        if (this._genericAffectedKeys.hasOwnProperty(position)) {\n          var genericKey = this._genericAffectedKeys[position];\n          if (checkedKeys.indexOf(genericKey) === -1) {\n            checkedKeys.push(genericKey);\n            if (genericKey && !test(genericKey)) {\n              keysToRemove.push(genericKey);\n            }\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = keysToRemove[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var key = _step7.value;\n\n          this.removeGenericKey(key);\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n    }\n\n    /**\n     * @method MongoObject.setValueForKey\n     * @param {String} key\n     * @param {Any} val\n     * @returns {undefined}\n     *\n     * Sets the value for every place in the object that affects\n     * the requested non-generic key\n     */\n\n  }, {\n    key: 'setValueForKey',\n    value: function setValueForKey(key, val) {\n      // We don't use getPositionForKey here because we want to be sure to\n      // set the value for all positions if there are multiple.\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = Object.getOwnPropertyNames(this._affectedKeys)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var position = _step8.value;\n\n          if (this._affectedKeys[position] === key) {\n            this.setValueForPosition(position, val);\n          }\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    }\n\n    /**\n     * @method MongoObject.setValueForGenericKey\n     * @param {String} key\n     * @param {Any} val\n     * @returns {undefined}\n     *\n     * Sets the value for every place in the object that affects\n     * the requested generic key\n     */\n\n  }, {\n    key: 'setValueForGenericKey',\n    value: function setValueForGenericKey(key, val) {\n      // We don't use getPositionForKey here because we want to be sure to\n      // set the value for all positions if there are multiple.\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var position = _step9.value;\n\n          if (this._genericAffectedKeys[position] === key) {\n            this.setValueForPosition(position, val);\n          }\n        }\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'removeArrayItems',\n    value: function removeArrayItems() {\n      // Traverse and pull out removed array items at this point\n      function traverse(obj) {\n        (0, _lodash2.default)(obj, function (val, indexOrProp) {\n          // Move deeper into the object\n          var next = obj[indexOrProp];\n\n          // If we can go no further, then quit\n          if (MongoObject.isBasicObject(next)) {\n            traverse(next);\n          } else if (Array.isArray(next)) {\n            obj[indexOrProp] = (0, _lodash8.default)(next, REMOVED_MARKER);\n            traverse(obj[indexOrProp]);\n          }\n        });\n      }\n\n      traverse(this._obj);\n    }\n\n    /**\n     * @method MongoObject.getObject\n     * @returns {Object}\n     *\n     * Get the source object, potentially modified by other method calls on this\n     * MongoObject instance.\n     */\n\n  }, {\n    key: 'getObject',\n    value: function getObject() {\n      return this._obj;\n    }\n\n    /**\n     * @method MongoObject.getFlatObject\n     * @returns {Object}\n     *\n     * Gets a flat object based on the MongoObject instance.\n     * In a flat object, the key is the name of the non-generic affectedKey,\n     * with mongo dot notation if necessary, and the value is the value for\n     * that key.\n     *\n     * With `keepArrays: true`, we don't flatten within arrays. Currently\n     * MongoDB does not see a key such as `a.0.b` and automatically assume\n     * an array. Instead it would create an object with key '0' if there\n     * wasn't already an array saved as the value of `a`, which is rarely\n     * if ever what we actually want. To avoid this confusion, we\n     * set entire arrays.\n     */\n\n  }, {\n    key: 'getFlatObject',\n    value: function getFlatObject() {\n      var _this3 = this;\n\n      var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var _ref2$keepArrays = _ref2.keepArrays;\n      var keepArrays = _ref2$keepArrays === undefined ? false : _ref2$keepArrays;\n\n      var newObj = {};\n      Object.keys(this._affectedKeys).forEach(function (position) {\n        var affectedKey = _this3._affectedKeys[position];\n        if (typeof affectedKey === 'string' && keepArrays === true && _this3._positionsInsideArrays.indexOf(position) === -1 && _this3._objectPositions.indexOf(position) === -1 || keepArrays !== true && _this3._parentPositions.indexOf(position) === -1) {\n          newObj[affectedKey] = _this3.getValueForPosition(position);\n        }\n      });\n      return newObj;\n    }\n\n    /**\n     * @method MongoObject.affectsKey\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Returns true if the non-generic key is affected by this object\n     */\n\n  }, {\n    key: 'affectsKey',\n    value: function affectsKey(key) {\n      return !!this.getPositionForKey(key);\n    }\n\n    /**\n     * @method MongoObject.affectsGenericKey\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Returns true if the generic key is affected by this object\n     */\n\n  }, {\n    key: 'affectsGenericKey',\n    value: function affectsGenericKey(key) {\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var position = _step10.value;\n\n          if (this._genericAffectedKeys[position] === key) return true;\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * @method MongoObject.affectsGenericKeyImplicit\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Like affectsGenericKey, but will return true if a child key is affected\n     */\n\n  }, {\n    key: 'affectsGenericKeyImplicit',\n    value: function affectsGenericKeyImplicit(key) {\n      var _iteratorNormalCompletion11 = true;\n      var _didIteratorError11 = false;\n      var _iteratorError11 = undefined;\n\n      try {\n        for (var _iterator11 = Object.getOwnPropertyNames(this._genericAffectedKeys)[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n          var position = _step11.value;\n\n          var affectedKey = this._genericAffectedKeys[position];\n          if (genericKeyAffectsOtherGenericKey(key, affectedKey)) return true;\n        }\n      } catch (err) {\n        _didIteratorError11 = true;\n        _iteratorError11 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion11 && _iterator11.return) {\n            _iterator11.return();\n          }\n        } finally {\n          if (_didIteratorError11) {\n            throw _iteratorError11;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    /* STATIC */\n\n    /* Takes a specific string that uses mongo-style dot notation\n     * and returns a generic string equivalent. Replaces all numeric\n     * \"pieces\" with a dollar sign ($).\n     *\n     * @param {type} name\n     * @returns {String} Generic name.\n     */\n\n  }], [{\n    key: 'makeKeyGeneric',\n    value: function makeKeyGeneric(key) {\n      if (typeof key !== 'string') return null;\n      return key.replace(/\\.[0-9]+(?=\\.|$)/g, '.$');\n    }\n\n    /** Takes a string representation of an object key and its value\n     *  and updates \"obj\" to contain that key with that value.\n     *\n     *  Example keys and results if val is 1:\n     *    \"a\" -> {a: 1}\n     *    \"a[b]\" -> {a: {b: 1}}\n     *    \"a[b][0]\" -> {a: {b: [1]}}\n     *    'a[b.0.c]' -> {a: {'b.0.c': 1}}\n     *\n     * @param {any} val\n     * @param {String} key\n     * @param {Object} obj\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'expandKey',\n    value: function expandKey(val, key, obj) {\n      var subkeys = key.split('[');\n      var current = obj;\n      for (var i = 0, ln = subkeys.length; i < ln; i++) {\n        var subkey = subkeys[i];\n        if (subkey.slice(-1) === ']') {\n          subkey = subkey.slice(0, -1);\n        }\n\n        if (i === ln - 1) {\n          // Last iteration; time to set the value; always overwrite\n          current[subkey] = val;\n\n          // If val is undefined, delete the property\n          if (val === void 0) delete current[subkey];\n        } else {\n          // See if the next piece is a number\n          var nextPiece = subkeys[i + 1];\n          nextPiece = parseInt(nextPiece, 10);\n          if (!current[subkey]) {\n            current[subkey] = isNaN(nextPiece) ? {} : [];\n          }\n        }\n\n        current = current[subkey];\n      }\n    }\n  }, {\n    key: '_keyToPosition',\n    value: function _keyToPosition(key, wrapAll) {\n      var position = '';\n      (0, _lodash2.default)(key.split('.'), function (piece, i) {\n        if (i === 0 && !wrapAll) {\n          position += piece;\n        } else {\n          position += '[' + piece + ']';\n        }\n      });\n      return position;\n    }\n\n    /**\n     * @method MongoObject._positionToKey\n     * @param {String} position\n     * @returns {String} The key that this position in an object would affect.\n     *\n     * This is different from MongoObject.prototype.getKeyForPosition in that\n     * this method does not depend on the requested position actually being\n     * present in any particular MongoObject.\n     */\n\n  }, {\n    key: '_positionToKey',\n    value: function _positionToKey(position) {\n      // XXX Probably a better way to do this, but this is\n      // foolproof for now.\n      var mDoc = new MongoObject({});\n      mDoc.setValueForPosition(position, 1); // Value doesn't matter\n      return mDoc.getKeyForPosition(position);\n    }\n\n    /**\n     * @method MongoObject.cleanNulls\n     * @public\n     * @param {Object} doc - Source object\n     * @returns {Object}\n     *\n     * Returns an object in which all properties with null, undefined, or empty\n     * string values have been removed, recursively.\n     */\n\n  }, {\n    key: 'cleanNulls',\n    value: function cleanNulls(doc, isArray, keepEmptyStrings) {\n      var newDoc = isArray ? [] : {};\n      Object.keys(doc).forEach(function (key) {\n        var val = doc[key];\n        if (!Array.isArray(val) && MongoObject.isBasicObject(val)) {\n          val = MongoObject.cleanNulls(val, false, keepEmptyStrings); // Recurse into plain objects\n          if (!(0, _lodash4.default)(val)) newDoc[key] = val;\n        } else if (Array.isArray(val)) {\n          val = MongoObject.cleanNulls(val, true, keepEmptyStrings); // Recurse into non-typed arrays\n          if (!(0, _lodash4.default)(val)) newDoc[key] = val;\n        } else if (!isNullUndefinedOrEmptyString(val)) {\n          newDoc[key] = val;\n        } else if (keepEmptyStrings && typeof val === 'string' && val.length === 0) {\n          newDoc[key] = val;\n        }\n      });\n      return newDoc;\n    }\n\n    /**\n     * @method MongoObject.reportNulls\n     * @public\n     * @param {Object} flatDoc - An object with no properties that are also objects.\n     * @returns {Object} An object in which the keys represent the keys in the\n     * original object that were null, undefined, or empty strings, and the value\n     * of each key is \"\".\n     */\n\n  }, {\n    key: 'reportNulls',\n    value: function reportNulls(flatDoc, keepEmptyStrings) {\n      var nulls = {};\n\n      // Loop through the flat doc\n      Object.keys(flatDoc).forEach(function (key) {\n        var val = flatDoc[key];\n        if (val === null || val === undefined || !keepEmptyStrings && typeof val === 'string' && val.length === 0 ||\n\n        // If value is an array in which all the values recursively are undefined, null,\n        // or an empty string\n        Array.isArray(val) && MongoObject.cleanNulls(val, true, keepEmptyStrings).length === 0) {\n          nulls[key] = '';\n        }\n      });\n      return nulls;\n    }\n\n    /**\n     * @method MongoObject.docToModifier\n     * @public\n     * @param {Object} doc - An object to be converted into a MongoDB modifier\n     * @param {Object} [options] - Options\n     * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.\n     * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.\n     * @returns {Object} A MongoDB modifier.\n     *\n     * Converts an object into a modifier by flattening it, putting keys with\n     * null, undefined, and empty string values into `modifier.$unset`, and\n     * putting the rest of the keys into `modifier.$set`.\n     */\n\n  }, {\n    key: 'docToModifier',\n    value: function docToModifier(doc) {\n      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var _ref3$keepArrays = _ref3.keepArrays;\n      var keepArrays = _ref3$keepArrays === undefined ? false : _ref3$keepArrays;\n      var _ref3$keepEmptyString = _ref3.keepEmptyStrings;\n      var keepEmptyStrings = _ref3$keepEmptyString === undefined ? false : _ref3$keepEmptyString;\n\n      // Flatten doc\n      var mDoc = new MongoObject(doc);\n      var flatDoc = mDoc.getFlatObject({ keepArrays: keepArrays });\n\n      // Get a list of null, undefined, and empty string values so we can unset them instead\n      var nulls = MongoObject.reportNulls(flatDoc, keepEmptyStrings);\n      flatDoc = MongoObject.cleanNulls(flatDoc, false, keepEmptyStrings);\n\n      var modifier = {};\n      if (!(0, _lodash4.default)(flatDoc)) modifier.$set = flatDoc;\n      if (!(0, _lodash4.default)(nulls)) modifier.$unset = nulls;\n      return modifier;\n    }\n\n    /* Tests whether \"obj\" is an Object as opposed to\n     * something that inherits from Object\n     *\n     * @param {any} obj\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'isBasicObject',\n    value: function isBasicObject(obj) {\n      return obj === Object(obj) && Object.getPrototypeOf(obj) === Object.prototype;\n    }\n\n    /**\n     * @method MongoObject.objAffectsKey\n     * @public\n     * @param  {Object} obj\n     * @param  {String} key\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'objAffectsKey',\n    value: function objAffectsKey(obj, key) {\n      var mDoc = new MongoObject(obj);\n      return mDoc.affectsKey(key);\n    }\n\n    /**\n     * @method MongoObject.objectsThatGenericKeyWillCreate\n     * @public\n     * @param  {String} genericKey\n     * @return {String[]} Array of other generic keys that would be created\n     *                    by this generic key\n     */\n\n  }, {\n    key: 'objectsThatGenericKeyWillCreate',\n    value: function objectsThatGenericKeyWillCreate(genericKey) {\n      var objs = [];\n\n      do {\n        var lastDotPosition = genericKey.lastIndexOf('.');\n        genericKey = lastDotPosition === -1 ? '' : genericKey.slice(0, lastDotPosition);\n        if (genericKey.length && !genericKey.endsWith('.$')) objs.push(genericKey);\n      } while (genericKey.length);\n\n      return objs;\n    }\n\n    /**\n     * @method MongoObject.expandObj\n     * @public\n     * @param  {Object} doc\n     * @return {Object}\n     *\n     * Takes a flat object and returns an expanded version of it.\n     */\n\n  }, {\n    key: 'expandObj',\n    value: function expandObj(doc) {\n      var newDoc = {};\n      Object.keys(doc).forEach(function (key) {\n        var val = doc[key];\n        var subkeys = key.split('.');\n        var subkeylen = subkeys.length;\n        var current = newDoc;\n        for (var i = 0; i < subkeylen; i++) {\n          var subkey = subkeys[i];\n          if (typeof current[subkey] !== 'undefined' && !(0, _lodash6.default)(current[subkey])) {\n            break; // Already set for some reason; leave it alone\n          }\n\n          if (i === subkeylen - 1) {\n            // Last iteration; time to set the value\n            current[subkey] = val;\n          } else {\n            // See if the next piece is a number\n            var nextPiece = subkeys[i + 1];\n            nextPiece = parseInt(nextPiece, 10);\n            if (isNaN(nextPiece) && !(0, _lodash6.default)(current[subkey])) {\n              current[subkey] = {};\n            } else if (!isNaN(nextPiece) && !Array.isArray(current[subkey])) {\n              current[subkey] = [];\n            }\n          }\n\n          current = current[subkey];\n        }\n      });\n      return newDoc;\n    }\n  }]);\n\n  return MongoObject;\n}();\n\n/* PRIVATE */\n\nexports.default = MongoObject;\nfunction appendAffectedKey(affectedKey, key) {\n  if (key === '$each') return affectedKey;\n  return affectedKey ? affectedKey + '.' + key : key;\n}\n\n// Extracts operator piece, if present, from position string\nfunction extractOp(position) {\n  var firstPositionPiece = position.slice(0, position.indexOf('['));\n  return firstPositionPiece.substring(0, 1) === '$' ? firstPositionPiece : null;\n}\n\nfunction genericKeyAffectsOtherGenericKey(key, affectedKey) {\n  // If the affected key is the test key\n  if (affectedKey === key) return true;\n\n  // If the affected key implies the test key because the affected key\n  // starts with the test key followed by a period\n  if (affectedKey.substring(0, key.length + 1) === key + '.') return true;\n\n  // If the affected key implies the test key because the affected key\n  // starts with the test key and the test key ends with \".$\"\n  var lastTwo = key.slice(-2);\n  if (lastTwo === '.$' && key.slice(0, -2) === affectedKey) return true;\n\n  return false;\n}\n\nfunction isNullUndefinedOrEmptyString(val) {\n  return val === undefined || val === null || typeof val === 'string' && val.length === 0;\n}"]},"metadata":{},"sourceType":"script"}