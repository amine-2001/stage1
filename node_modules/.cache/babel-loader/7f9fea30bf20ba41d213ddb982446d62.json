{"ast":null,"code":"import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { connectField } from 'uniforms';\nimport wrapField from './wrapField';\n\nconst noneIfNaN = x => isNaN(x) ? undefined : x;\n\nconst parse = (decimal, x) => noneIfNaN((decimal ? parseFloat : parseInt)(x));\n\nconst Num_ = props => wrapField(props, React.createElement(\"input\", {\n  className: classnames(props.inputClassName, 'form-control', {\n    'is-invalid': props.error\n  }),\n  disabled: props.disabled,\n  id: props.id,\n  max: props.max,\n  min: props.min,\n  name: props.name,\n  onChange: props.onChange,\n  placeholder: props.placeholder,\n  ref: props.inputRef,\n  step: props.step || (props.decimal ? 0.01 : 1),\n  type: \"number\",\n  value: props.value\n}));\n\nlet Num; // istanbul ignore next\n\nif (parseInt(React.version, 10) < 16) {\n  Num = class Num extends Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        value: '' + this.props.value\n      };\n\n      this.onChange = event => {\n        const value = event.target.value.replace(/[^\\d.,-]/g, '');\n        this.setState({\n          value\n        });\n        this.props.onChange(parse(this.props.decimal, value));\n      };\n    }\n\n    componentWillReceiveProps({\n      decimal,\n      value\n    }) {\n      if (parse(decimal, value) !== parse(decimal, this.state.value.replace(/[.,]+$/, ''))) {\n        this.setState({\n          value: value === undefined || value === '' ? '' : '' + value\n        });\n      }\n    }\n\n    render() {\n      return Num_(Object.assign(Object.assign({}, this.props), {\n        onChange: this.onChange,\n        value: this.state.value\n      }));\n    }\n\n  };\n} else {\n  Num = props => Num_(Object.assign(Object.assign({}, props), {\n    onChange(event) {\n      props.onChange(parse(props.decimal, event.target.value));\n    }\n\n  }));\n}\n\nexport default connectField(Num);","map":{"version":3,"sources":["C:/Users/asus/Desktop/new template/myadmin-lite/node_modules/uniforms-bootstrap4/es6/NumField.js"],"names":["React","Component","classnames","connectField","wrapField","noneIfNaN","x","isNaN","undefined","parse","decimal","parseFloat","parseInt","Num_","props","createElement","className","inputClassName","error","disabled","id","max","min","name","onChange","placeholder","ref","inputRef","step","type","value","Num","version","constructor","arguments","state","event","target","replace","setState","componentWillReceiveProps","render","Object","assign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { connectField } from 'uniforms';\nimport wrapField from './wrapField';\nconst noneIfNaN = x => (isNaN(x) ? undefined : x);\nconst parse = (decimal, x) => noneIfNaN((decimal ? parseFloat : parseInt)(x));\nconst Num_ = props => wrapField(props, React.createElement(\"input\", { className: classnames(props.inputClassName, 'form-control', {\n        'is-invalid': props.error,\n    }), disabled: props.disabled, id: props.id, max: props.max, min: props.min, name: props.name, onChange: props.onChange, placeholder: props.placeholder, ref: props.inputRef, step: props.step || (props.decimal ? 0.01 : 1), type: \"number\", value: props.value }));\nlet Num;\n// istanbul ignore next\nif (parseInt(React.version, 10) < 16) {\n    Num = class Num extends Component {\n        constructor() {\n            super(...arguments);\n            this.state = { value: '' + this.props.value };\n            this.onChange = event => {\n                const value = event.target.value.replace(/[^\\d.,-]/g, '');\n                this.setState({ value });\n                this.props.onChange(parse(this.props.decimal, value));\n            };\n        }\n        componentWillReceiveProps({ decimal, value }) {\n            if (parse(decimal, value) !==\n                parse(decimal, this.state.value.replace(/[.,]+$/, ''))) {\n                this.setState({\n                    value: value === undefined || value === '' ? '' : '' + value,\n                });\n            }\n        }\n        render() {\n            return Num_(Object.assign(Object.assign({}, this.props), { onChange: this.onChange, value: this.state.value }));\n        }\n    };\n}\nelse {\n    Num = props => Num_(Object.assign(Object.assign({}, props), { onChange(event) {\n            props.onChange(parse(props.decimal, event.target.value));\n        } }));\n}\nexport default connectField(Num);\n"]},"metadata":{},"sourceType":"module"}