{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _SimpleSchema = require(\"../SimpleSchema\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/**\n * Converts value to proper type\n *\n * @param {Any} value Value to try to convert\n * @param {Any} type  A type\n * @returns {Any} Value converted to type.\n */\n\n\nfunction convertToProperType(value, type) {\n  // Can't and shouldn't convert arrays or objects or null\n  if (Array.isArray(value) || value && (typeof value === 'function' || _typeof(value) === 'object') && !(value instanceof Date) || value === null) return value; // Convert to String type\n\n  if (type === String) {\n    if (value === null || value === undefined) return value;\n    return value.toString();\n  } // Convert to Number type\n\n\n  if (type === Number || type === _SimpleSchema.SimpleSchema.Integer) {\n    if (typeof value === 'string' && value.length > 0) {\n      // Try to convert numeric strings to numbers\n      var numberVal = Number(value);\n      if (!isNaN(numberVal)) return numberVal;\n    } // Leave it; will fail validation\n\n\n    return value;\n  } // If target type is a Date we can safely convert from either a\n  // number (Integer value representing the number of milliseconds\n  // since 1 January 1970 00:00:00 UTC) or a string that can be parsed\n  // by Date.\n\n\n  if (type === Date) {\n    if (typeof value === 'string') {\n      var parsedDate = Date.parse(value);\n      if (isNaN(parsedDate) === false) return new Date(parsedDate);\n    }\n\n    if (typeof value === 'number') return new Date(value);\n  } // Convert to Boolean type\n\n\n  if (type === Boolean) {\n    if (typeof value === 'string') {\n      // Convert exact string 'true' and 'false' to true and false respectively\n      if (value.toLowerCase() === 'true') return true;else if (value.toLowerCase() === 'false') return false;\n    } else if (typeof value === 'number' && !isNaN(value)) {\n      // NaN can be error, so skipping it\n      return Boolean(value);\n    }\n  } // If an array is what you want, I'll give you an array\n\n\n  if (type === Array) return [value]; // Could not convert\n\n  return value;\n}\n\nvar _default = convertToProperType;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["C:/wamp/www/Projet_snaii_DEV/snaii/node_modules/simpl-schema/dist/clean/convertToProperType.js"],"names":["Object","defineProperty","exports","value","_SimpleSchema","require","_typeof","obj","Symbol","iterator","constructor","prototype","convertToProperType","type","Array","isArray","Date","String","undefined","toString","Number","SimpleSchema","Integer","length","numberVal","isNaN","parsedDate","parse","Boolean","toLowerCase","_default","module","default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _SimpleSchema = require(\"../SimpleSchema\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Converts value to proper type\n *\n * @param {Any} value Value to try to convert\n * @param {Any} type  A type\n * @returns {Any} Value converted to type.\n */\nfunction convertToProperType(value, type) {\n  // Can't and shouldn't convert arrays or objects or null\n  if (Array.isArray(value) || value && (typeof value === 'function' || _typeof(value) === 'object') && !(value instanceof Date) || value === null) return value; // Convert to String type\n\n  if (type === String) {\n    if (value === null || value === undefined) return value;\n    return value.toString();\n  } // Convert to Number type\n\n\n  if (type === Number || type === _SimpleSchema.SimpleSchema.Integer) {\n    if (typeof value === 'string' && value.length > 0) {\n      // Try to convert numeric strings to numbers\n      var numberVal = Number(value);\n      if (!isNaN(numberVal)) return numberVal;\n    } // Leave it; will fail validation\n\n\n    return value;\n  } // If target type is a Date we can safely convert from either a\n  // number (Integer value representing the number of milliseconds\n  // since 1 January 1970 00:00:00 UTC) or a string that can be parsed\n  // by Date.\n\n\n  if (type === Date) {\n    if (typeof value === 'string') {\n      var parsedDate = Date.parse(value);\n      if (isNaN(parsedDate) === false) return new Date(parsedDate);\n    }\n\n    if (typeof value === 'number') return new Date(value);\n  } // Convert to Boolean type\n\n\n  if (type === Boolean) {\n    if (typeof value === 'string') {\n      // Convert exact string 'true' and 'false' to true and false respectively\n      if (value.toLowerCase() === 'true') return true;else if (value.toLowerCase() === 'false') return false;\n    } else if (typeof value === 'number' && !isNaN(value)) {\n      // NaN can be error, so skipping it\n      return Boolean(value);\n    }\n  } // If an array is what you want, I'll give you an array\n\n\n  if (type === Array) return [value]; // Could not convert\n\n  return value;\n}\n\nvar _default = convertToProperType;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}